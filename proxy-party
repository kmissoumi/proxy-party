#!/bin/bash
#
# Copyright (c) 2022, Kareem Missoumi
# All rights reserved.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.
#
# 


# init
timeStampLong=$(date +"%Y-%m-%d_%H%M%S_%s")
timeStamp=$(date +"%Y-%m-%d_%H%M%S")
scriptPath="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
proxyPartyHome=$( echo "${scriptPath%/*}" )

# default configuration
proxyPartyPort=9001
sauceRegion="us-west"
protoHost="https://api.us-west-1.saucelabs.com"

# base configuration
baseDir="${scriptPath}/data/${timeStamp}"
configDir="${scriptPath}/config"


function pre_flight {
  log_info "Starting Proxy Party!"
  party_mode
  load_lib
  load_credentials
  log_debug "Credentials loaded OK."
  check_bin
  check_env
  log_info "Base configuration directory." && log_cmd "${baseDir}"
  log_info "Pre-flight check list completed OK."
}


function party_mode {
  [[ ${PARTY_MODE} == "dry-run" ]] && PARTY_MODE=true || return

  log_warn "Starting dry run."
  log_debug "Proxy Party will run pre-flight checks, generate configuration, and exit."
}


function check_bin {
  log_info "Check binary dependencies."
  #alias ch='/Applications/Charles.app/Contents/MacOS/Charles'

  binList="curl
    jq
    op
    sc"
  
  curl="curl"
  jq="jq"
  op="1password-cli"
  sc="sauce-connect"

  missing=""

  for b in ${binList}
  do
    [[ -z $(command -v ${b}) ]] && missing+="${!b} "
  done

 [[ -z $(command -v /Applications/Charles.app/Contents/MacOS/Charles) ]] && missing+="charles "

  if [ -n "${missing}" ]
  then
    log_error "Exiting NOTOK. Missing binary. Please review install command below."
    log_cmd "brew install ${missing}"
    exit 127
  fi
}


function check_env {
  # sauce credentials are used by sauce connect and never read or written to file
  log_info "Check environment configuration."
  envList="SAUCE_USERNAME
    SAUCE_ACCESS_KEY
    EMAIL
    wonderProxyEncryptedToken
    charlesProxySiteLicenseUserName
    charlesProxySiteLicenseKey
    wonderProxyEncryptedToken
    wonderProxyUserName"


  for e in ${envList}
  do
    [[ -z ${!e} ]] && missing+="${e} "
  done

  if [ -n "${missing}" ]
  then
    log_error "Exiting NOTOK. Missing environment variable(s). Please set!"
    log_cmd "${missing}"
    exit 128
  fi

}


function load_lib {
  f="${scriptPath}/proxy-party-lib"
  [[ -f "${f}" ]] && source ${f}
}


function load_credentials {
  log_info "Load secrets from cache."
  c="${HOME}/.config/op/config"
  f="${HOME}/.config/op/.proxypartyrc"

  # check for op config
  [[ -f "${c}" ]] && [[ -s "${c}" ]] || init_credentials 
  log_debug "${FUNCNAME[0]} ${OP_SESSION_saucelabs}"

  [[ -f "${f}" ]] && [[ -s "${f}" ]] && source ${f} || pull_credentials ${f} 
}


function debug_source_credentials {
  c="${HOME}/.config/op/config"
  f="${HOME}/.config/op/.proxypartyrc"

  log_info "Loading secrets from cache."
  [[ -f "${c}" ]] && [[ -s "${c}" ]] || init_credentials
  [[ -f "${f}" ]] && [[ -s "${f}" ]] && source ${f} || pull_credentials ${f}
}


function debug_check_c2 {
  printf "%s: %s" ${FUNCNAME[0]} ${OP_SESSION_saucelabs}
}


function init_credentials {
  log_warn "1Password CLI configuration does not exist."
  log_info "Entering interactive prompt to setup 1Password CLI configuration."
  export OP_SESSION_saucelabs=$(op signin --raw saucelabs.1password.com ${EMAIL})
  log_debug "${FUNCNAME[0]} ${OP_SESSION_saucelabs}"
  load_credentials
}


function pull_credentials {
  # using the ProxyParty item UUID to retrieve secrets from the SE shared vault
  f="${HOME}/.config/op/.proxypartyrc"
  proxyPartyVaultUUID="zaeactx3yfakzgt5iynxyqq7vi"
  [[ -z ${OP_SESSION_saucelabs} ]] && auth_credentials
  op get item "${proxyPartyVaultUUID}" \
   |jq -r '.details.sections[1].fields[]|"export " + .t + "=" + .v' > ${f}
  load_credentials
}


function auth_credentials {

    log_warn "1Password CLI token does not exist."
    log_info "Entering interactive prompt to refresh 1Password CLI token."
    export OP_SESSION_saucelabs=$(op signin --raw saucelabs)

}


function check_port {
  i=true
  while ${i}
    do
      openFiles=$(lsof -n -i TCP:${proxyPartyPort})
      [[ $? = 1 ]] && i=false || next_port
    done
}


function list_port {
  sudo lsof -PiTCP -sTCP:LISTEN
}


function log_pid {
  printf "%s" $! >> ${sessionDir}/${1}.pid
}


function next_port {
  ((proxyPartyPort++))
}


function session_init {
  mkdir -p ${sessionDir}
}


function build_config {
  log_info "Building configuration for **${cityName}**."
  check_port
  build_pac
  build_chuck_config
  build_sauce_config
}


function build_pac {
  proxyPacTemplate="${configDir}/pac/proxyTemplate.pac"
  proxyPac="${sessionDir}/proxy-${tunnelName}.pac"

  sed "s/localhost:port/localhost:${proxyPartyPort}/" ${proxyPacTemplate} > ${proxyPac}
}


function build_chuck_config {
  chuckSessionTemplate="${configDir}/charles/newSession.chls"
  chuckBaseName="charles-${tunnelName}"
  chuckSession="${sessionDir}/${chuckBaseName}.chls"
  chuckConfigTemplate="${configDir}/charles/charles.config"
  chuckConfig="${sessionDir}/${chuckBaseName}.config"

  wonderProxyPort=12000
  wonderProxyDomain="wonderproxy.com"

  cp ${chuckSessionTemplate} ${chuckSession}

  sed \
    -e "s/proxyPartyPort/${proxyPartyPort}/" \
    -e "s/wonderProxyPort/${wonderProxyPort}/" \
    -e "s/wonderProxyHost/${cityName}.${wonderProxyDomain}/" \
    -e 's/charlesProxySiteLicenseUserName/'"${charlesProxySiteLicenseUserName}"'/' \
    -e "s/charlesProxySiteLicenseKey/${charlesProxySiteLicenseKey}/" \
    -e 's/wonderProxyEncryptedToken/'"${wonderProxyEncryptedToken}"'/g' \
    -e "s/wonderProxyUserName/${wonderProxyUserName}/g" \
    ${chuckConfigTemplate} > ${chuckConfig}

  next_port
}


function build_sauce_config {
  sauceConfigTemplate="${configDir}/sauce/sauceBaseConfig.yml"
  sauceBaseName="sauce-connect-${tunnelName}"
  sauceConfig="${sessionDir}/${sauceBaseName}.yml"
  saucePidFile="${logDir}/${sauceBaseName}.pid"
  sauceReadyFile="${logDir}/${sauceBaseName}.ready"

  sed \
    -e "s/<sauceRegion>/${sauceRegion}/" \
    -e "s/<tunnelName>/${tunnelName}/" \
    ${sauceConfigTemplate} > ${sauceConfig}

  printf "\n%s%s" "pidfile: " ${saucePidFile} >> ${sauceConfig}
  printf "\n%s%s" "readyFile: " ${sauceReadyFile} >> ${sauceConfig}
  printf "\n%s%s" "pac: file://" ${proxyPac} >> ${sauceConfig}
 
}


function off_blast {
  start_sauce
  start_chuck
  sleep 1
}


function start_sauce {
  sauceBaseName="sauce-connect-${tunnelName}"
  sauceConfig="${sessionDir}/${sauceBaseName}.yml"
  sauceLog="${logDir}/${sauceBaseName}.log"

  log_info "Starting Sauce Connect Proxy."
  sc --config-file ${sauceConfig} > ${sauceLog} 2>&1 &
  log_pid sc-${tunnelName}
}


function start_chuck {
  alias ch='/Applications/Charles.app/Contents/MacOS/Charles'
  chuckBaseName="charles-${tunnelName}"
  chuckConfig="${sessionDir}/${chuckBaseName}.config"
  chuckSession="${sessionDir}/${chuckBaseName}.chls"
  chuckLog="${logDir}/${chuckBaseName}.log"

  # add option to run -headless
  /Applications/Charles.app/Contents/MacOS/Charles -config ${chuckConfig} ${chuckSession} > ${chuckLog} 2>&1 &
  log_pid charles-${tunnelName}


  # check chuck chore
  check_chuck "Ready"
  
  # throttle network
  port=$(xsltproc --novalid --nonet ${configDir}/charles/getPort.xsl ${chuckConfig})
  throttle_chuck ${port} 
}


function check_chuck {
  key=${1}

  chuckBaseName="charles-${tunnelName}"
  chuckLog="${logDir}/${chuckBaseName}.log"
 
  check_log ${key} ${chuckLog}
}


function check_log {
  key=${1}
  logFile=${2}

  i=true

  # timing issue when running charles in headless mode
  # either case need to parse the XML response

  c=0     # c is for counter
  r=10    # r is for retries
  t=2     # t is the interval in seconds between retries

  while ${i}
    do
      # only print INFO when counter is even
      [[ $((c%2)) -eq 0 ]] && check_in ${1}
      grep ${key} ${logFile} 2>&1 > /dev/null
      # exit loop if we match
      [[ $? = 0 ]] && i=false || sleep $t
      # cleanup and exit to shell if we exceed retry value
      [[ $c -ge $r ]] && timeout || ((c++))
    done
}


function timeout {
  log_warn "Charles did not respond in time!"
  log_error "Exiting NOTOK. Increase retry window and try again."
  party-pooper
  exit 3
}


function check_in {
  log_info "Waiting for **${1}** response from Charles."
}


function throttle_chuck {
  port=${1}

  # network presets
  dialup="56+kbps+Modem"
  isdn="256+kbps+ISDN%2FDSL"
  adsl="2+Mbps+ADSL"
  adsl2="8+Mbps+ADSL2"
  vdsl="32+Mbps+VDSL"
  fibre="32+Mbps+Fibre"
  mobile="4G"

  log_info "Set network type to **${networkType}**."

  # the management interface of every Charles Proxy instance is accessed via the proxy itself.
  proxyHost="http://localhost:${port}"

  # the actual management address which is resolvable via proxy.
  protoHost="http://control.charles"
  
  # use the key name to reference the preset value
  responseThrottle=$(curl --silent --proxy ${proxyHost} "${protoHost}/throttling/activate?preset=${!networkType}")
  printf "%s" ${responseThrottle} > ${sessionDir}/charles-${tunnelName}-responseThrottle.xml
  check_chuck "Throttling"
  sleep 2

  responseRecord=$(curl --silent --proxy ${proxyHost} "${protoHost}/recording/start")
  printf "%s" ${responseRecord}  > ${sessionDir}/charles-${tunnelName}-responseRecord.xml
  check_chuck "Recording"
}


function post_flight {
  # check health
  # check connectivity
  log_info "Everything is (probably) AOK!"
  log_info "Use the party-pooper command to stop all processes."
  log_cmd "source ${scriptPath}/proxy-party-lib"
  log_cmd "party-pooper"
  log_info "Exiting OK"
  exit 0
}


# are we having fun yet!?
pre_flight

for r in "$@"
do
  cityName=${r%-*}
  networkType=${r#*-}
  tunnelName="${cityName}-${networkType}" 
  sessionDir=${baseDir}/${tunnelName} && logDir="${sessionDir}"

  session_init
  build_config
  [[ ${PARTY_MODE} ]] || off_blast
done

[[ ${PARTY_MODE} ]] && (log_info "Exiting dry run OK" && exit 0) || post_flight

exit 4